name: Deployment
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      environment:
        description: Environment to deploy to
        required: true
        type: string

concurrency:
  group: ${{ inputs.environment || 'production' }}_deployment
  cancel-in-progress: true

env:
  PRODUCTION: ${{ inputs.environment == 'production' }}

jobs:
  deployment:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.get-url.outputs.url }}

    steps:
      - uses: actions/checkout@v4
      - run: curl -sL firebase.tools | analytics=false bash
      - run: echo "GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/service-account.json" >> $GITHUB_ENV
      - run: echo $SERVICE_ACCOUNT > $RUNNER_TEMP/service-account.json
        env:
          SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Downloading audios data file from Firebase RTDB
      - uses: ./.github/actions/download-records
        with:
          file-path: ${{ runner.temp }}/audios.json
          gcp-account: ${{ secrets.GCP_PROJECT }}

      - uses: algolia/setup-algolia-cli@v1.1.0

      # Mimicking the behaviour of replace-all-objects: https://www.algolia.com/doc/api-reference/api-methods/replace-all-objects/
      # For pipefail: https://stackoverflow.com/a/19804002
      - name: Update Algolia index
        run: |
          set -o pipefail
          algolia indices copy $INDEX $TEMP_INDEX --scope settings,synonyms,rules --confirm

          # https://www.algolia.com/doc/tools/cli/examples/recipes/#import-from-a-json-file
          jq -c '.[]?' ${{ runner.temp }}/audios.json | algolia objects import $TEMP_INDEX -F -

          algolia indices move $TEMP_INDEX $INDEX --confirm
        env:
          ALGOLIA_CLI_TELEMETRY: 0
          # CLI uses these two env variable for authentication: https://github.com/algolia/setup-algolia-cli/issues/4#issuecomment-1465172597
          ALGOLIA_APPLICATION_ID: ${{ vars.ALGOLIA_APPLICATION_ID }}
          ALGOLIA_ADMIN_API_KEY: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}
          INDEX: ${{ vars.ALGOLIA_INDEX_AUDIOS }}
          TEMP_INDEX: ${{ vars.ALGOLIA_INDEX_AUDIOS }}_tmp

      - uses: actions/setup-node@v3
        with:
          node-version-file: frontend/package.json
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - run: |
          npm ci
          npm run build
        name: Build frontend
        working-directory: frontend
        env:
          AUDIOS_DATA_PATH: ${{ runner.temp }}/audios.json
          ALGOLIA_APPLICATION_ID: ${{ vars.ALGOLIA_APPLICATION_ID }}
          ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
          ALGOLIA_INDEX_AUDIOS: ${{ vars.ALGOLIA_INDEX_AUDIOS }}
          ALGOLIA_INDEX_MEMORIES: ${{ vars.ALGOLIA_INDEX_MEMORIES}}
          STORAGE_BASE_URL: ${{ vars.STORAGE_BASE_URL}}
          DONATION_URL: ${{ vars.DONATION_URL}}
          FEEDBACK_FORM_AUDIOS: ${{ vars.FEEDBACK_FORM_AUDIOS}}
          FEEDBACK_FORM_MEMORIES: ${{ vars.FEEDBACK_FORM_MEMORIES }}
          DIRECTUS_URL: ${{ vars.DIRECTUS_URL }}
          DIRECTUS_STATIC_TOKEN: ${{ secrets.DIRECTUS_STATIC_TOKEN }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}

      # Creating a channel explicitly to get its full name
      - run: |
          firebase hosting:channel:create ${{ github.head_ref }} --json --project ${{ vars.GCP_PROJECT_ID }} |\
          jq '.result.name' --raw-output |\
          (echo -n "name=" && cat) >> $GITHUB_OUTPUT
        id: create-channel
        if: ${{ env.PRODUCTION != 'true' }}

      # Deploying
      - run: firebase $COMMAND --project ${{ vars.GCP_PROJECT_ID }} --force --non-interactive
        env:
          COMMAND: ${{ env.PRODUCTION == 'true' && 'deploy --only hosting' || format('hosting:channel:deploy {0}', github.head_ref) }}

      # Inspired by https://superuser.com/a/943466 and https://stackoverflow.com/a/74998363
      - name: Get URL
        id: get-url
        run: |
          set -o pipefail
          firebase hosting:channel:list --json --project ${{ vars.GCP_PROJECT_ID }} |\
          jq '.result.channels[] | select(.name | endswith("$SUFFIX")) | .url' --raw-output |\
          (echo -n "url=" && cat) >> $GITHUB_OUTPUT
        env:
          # Full channel name is not a suffix, but still the condition `endswith` will work
          SUFFIX: ${{ steps.create-channel.outputs.name || 'live'}}
